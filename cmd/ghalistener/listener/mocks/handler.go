// Code generated by mockery v2.36.1. DO NOT EDIT.

package mocks

import (
	context "context"

	actions "github.com/actions/actions-runner-controller/github/actions"

	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// HandleDesiredRunnerCount provides a mock function with given fields: ctx, count, jobsCompleted
func (_m *Handler) HandleDesiredRunnerCount(ctx context.Context, count int, jobsCompleted int) (int, error) {
	ret := _m.Called(ctx, count, jobsCompleted)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) (int, error)); ok {
		return rf(ctx, count, jobsCompleted)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) int); ok {
		r0 = rf(ctx, count, jobsCompleted)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, count, jobsCompleted)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleJobStarted provides a mock function with given fields: ctx, jobInfo
func (_m *Handler) HandleJobStarted(ctx context.Context, jobInfo *actions.JobStarted) error {
	ret := _m.Called(ctx, jobInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *actions.JobStarted) error); ok {
		r0 = rf(ctx, jobInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
