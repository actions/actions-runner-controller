apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
data:
  # Health check for actions.summerwind.dev/v1alpha1 Runner
  resource.customizations.health.actions.summerwind.dev_Runner: |
    hs = {}
    if obj.status ~= nil then
      if obj.status.ready == true and obj.status.phase == "Running" then
        hs.status = "Healthy"
        hs.message = "Runner is ready and running"
      elseif obj.status.phase == "Pending" or obj.status.phase == "Created" then
        hs.status = "Progressing"
        hs.message = "Runner is starting up"
      elseif obj.status.phase == "Failed" then
        hs.status = "Degraded"
        hs.message = obj.status.message or "Runner has failed"
      else
        hs.status = "Progressing"
        hs.message = "Runner status: " .. (obj.status.phase or "Unknown")
      end
    else
      hs.status = "Progressing"
      hs.message = "Waiting for runner status"
    end
    return hs
  
  # Health check for actions.github.com/v1alpha1 EphemeralRunner
  resource.customizations.health.actions.github.com_EphemeralRunner: |
    hs = {}
    if obj.status ~= nil then
      if obj.status.phase == "Running" then
        hs.status = "Healthy"
        hs.message = "EphemeralRunner is running"
      elseif obj.status.phase == "Pending" then
        hs.status = "Progressing"
        hs.message = "EphemeralRunner is pending"
      elseif obj.status.phase == "Failed" then
        hs.status = "Degraded"
        hs.message = obj.status.message or "EphemeralRunner has failed"
      elseif obj.status.phase == "Finished" then
        hs.status = "Healthy"
        hs.message = "EphemeralRunner has finished"
      else
        hs.status = "Progressing"
        hs.message = "EphemeralRunner status: " .. (obj.status.phase or "Unknown")
      end
    else
      hs.status = "Progressing"
      hs.message = "Waiting for EphemeralRunner status"
    end
    return hs
  
  # Health check for actions.github.com/v1alpha1 AutoScalingRunnerSet
  resource.customizations.health.actions.github.com_AutoScalingRunnerSet: |
    hs = {}
    if obj.status ~= nil then
      if obj.status.currentReplicas ~= nil and obj.status.desiredReplicas ~= nil then
        if obj.status.currentReplicas == obj.status.desiredReplicas then
          hs.status = "Healthy"
          hs.message = string.format("Runners: %d/%d", obj.status.currentReplicas, obj.status.desiredReplicas)
        else
          hs.status = "Progressing"
          hs.message = string.format("Scaling runners: %d/%d", obj.status.currentReplicas, obj.status.desiredReplicas)
        end
      else
        hs.status = "Progressing"
        hs.message = "Initializing runner set"
      end
    else
      hs.status = "Progressing"
      hs.message = "Waiting for status"
    end
    return hs